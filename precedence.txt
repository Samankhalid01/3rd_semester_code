#include <iostream>
#include <stack>
#include <string>
using namespace std;

stack<char> st;

bool isValid(string s)
{
    int n = s.size();
    for (int i = 0; i < n; i++)
    {
        if (s[i] == '(' || s[i] == '[' || s[i] == '{')
        {
            st.push(s[i]);
        }
        else if (s[i] == ')' || s[i] == ']' || s[i] == '}')
        {
            if (!st.empty() && ((s[i] == ')' && st.top() == '(') || (s[i] == ']' && st.top() == '[') || (s[i] == '}' && st.top() == '{')))
                st.pop();
            else
                return false;
        }
    }

    if (!st.empty())
    {
        return false;
    }
    else
    {
        return true;
    }
}

bbool checkPrecedence(string input)
{
    stack<char> st;
    string validOrder = "[{()}]";
    int index = 0;
    for (int i = 0; i < input.size(); i++)
    {
        char c = input[i];
        if (c == validOrder[index])
        {
            st.push(c);
            index++;
            if (index == validOrder.size()) {
                index = 0;
            }
        }
        else if (!st.empty() && validOrder.find(st.top()) == validOrder.find(c))
        {
            st.pop();
        }
        else
        {
            return false;
        }
    }
    return st.empty();
}


int main()
{
    string s;
    cout << "Enter a string: ";
    getline(cin, s);

    // Check if the input string contains balanced parentheses
    if (isValid(s))
    {
        cout << "The input string contains balanced parentheses." << endl;
    }
    else
    {
        cout << "The input string does not contain balanced parentheses." << endl;
    }

    // Check if the input string contains brackets with valid precedence
    if (checkPrecedence(s))
    {
        cout << "The input string contains brackets with valid precedence." << endl;
    }
    else
    {
        cout << "The input string contains brackets with invalid precedence." << endl;
    }

    return 0;
}
